// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TimeTracker.DAL;

#nullable disable

namespace TimeTracker.DAL.Migrations
{
    [DbContext(typeof(TimeTrackerDbContext))]
    partial class TimeTrackerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TimeTracker.DAL.Entities.ResetPasswordToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(108)
                        .HasColumnType("character varying(108)");

                    b.HasKey("UserId");

                    b.ToTable("ResetPasswordTokens", (string)null);
                });

            modelBuilder.Entity("TimeTracker.DAL.Entities.TimeEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TimeEntries");
                });

            modelBuilder.Entity("TimeTracker.DAL.Entities.Track", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Genre")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("TimeTracker.DAL.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("CITEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(2)
                        .HasColumnName("StatusId");

                    b.Property<DateTimeOffset>("UpdatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer")
                        .HasColumnName("UserRoleId");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.HasIndex("UserRole");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1L,
                            CreatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "",
                            Name = "System",
                            Password = "",
                            Status = 2,
                            UpdatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserRole = 2
                        },
                        new
                        {
                            Id = 1L,
                            CreatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "test1@email.com",
                            Name = "TEST_NAME_1",
                            Password = "AQAAAAIAAAPoAAAAEIRkNwshX5CX4zRwq4S/s2TTaF7POQ6KciTxA3F7EYykjsSV7QU2g021W6hFKNoM8w==",
                            Status = 2,
                            UpdatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserRole = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "test2@email.com",
                            Name = "TEST_NAME_2",
                            Password = "AQAAAAIAAAPoAAAAEIRkNwshX5CX4zRwq4S/s2TTaF7POQ6KciTxA3F7EYykjsSV7QU2g021W6hFKNoM8w==",
                            Status = 2,
                            UpdatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserRole = 1
                        },
                        new
                        {
                            Id = 3L,
                            CreatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "test3@email.com",
                            Name = "TEST_NAME_3",
                            Password = "AQAAAAIAAAPoAAAAEIRkNwshX5CX4zRwq4S/s2TTaF7POQ6KciTxA3F7EYykjsSV7QU2g021W6hFKNoM8w==",
                            Status = 2,
                            UpdatedDateTime = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserRole = 1
                        });
                });

            modelBuilder.Entity("TimeTracker.DAL.Entities.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "RefreshToken")
                        .IsUnique();

                    b.ToTable("UserRefreshTokens", (string)null);
                });

            modelBuilder.Entity("TimeTracker.DAL.Entities.UserRoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Default User"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Super Admin"
                        });
                });

            modelBuilder.Entity("TimeTracker.DAL.Entities.UserStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("UserStatuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Inactive"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Active"
                        });
                });

            modelBuilder.Entity("TimeTracker.DAL.Entities.ResetPasswordToken", b =>
                {
                    b.HasOne("TimeTracker.DAL.Entities.User", "User")
                        .WithOne("ResetPasswordToken")
                        .HasForeignKey("TimeTracker.DAL.Entities.ResetPasswordToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeTracker.DAL.Entities.TimeEntry", b =>
                {
                    b.HasOne("TimeTracker.DAL.Entities.User", "User")
                        .WithMany("TimeEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeTracker.DAL.Entities.User", b =>
                {
                    b.HasOne("TimeTracker.DAL.Entities.UserStatusEntity", "UserStatusEntity")
                        .WithMany("Users")
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TimeTracker.DAL.Entities.UserRoleEntity", "UserRoleEntity")
                        .WithMany("Users")
                        .HasForeignKey("UserRole")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserRoleEntity");

                    b.Navigation("UserStatusEntity");
                });

            modelBuilder.Entity("TimeTracker.DAL.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("TimeTracker.DAL.Entities.User", "User")
                        .WithMany("UserRefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeTracker.DAL.Entities.User", b =>
                {
                    b.Navigation("ResetPasswordToken");

                    b.Navigation("TimeEntries");

                    b.Navigation("UserRefreshTokens");
                });

            modelBuilder.Entity("TimeTracker.DAL.Entities.UserRoleEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TimeTracker.DAL.Entities.UserStatusEntity", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
